#!/bin/sh

# Configure script for bbgen.
#
# This is a quick hack to make things work on the systems I use
# personally, without having to do the full GNU Autoconf thing.

echo ""
echo "Configuration script for bbgen"
echo ""

if test -r Makefile
then
	echo "Already configured - remove Makefile to re-configure"
	exit 1
else
	echo "This script asks a few questions and builds a Makefile to compile bbgen"
	echo ""
	echo "Are you using the standard BB, or bbgend [bbgend] ?"
	read TARGET
	if test -z "$TARGET"
	then
		TARGET="bbgend"
	fi

	if test "$TARGET" = "bbgend"
	then
		echo "Checking pre-requisites for bbgend build"
		echo ""
		. build/rrd.sh
		echo ""; echo ""
		. build/pcre.sh
		echo ""; echo ""
	else
		echo "Checking pre-requisites for standard BB build"
		echo ""
	fi

	. build/ssl.sh
	if test -z "$OSSLINC" -o -z "$OSSLLIB"
	then
		ENABLESSL="n"
		SSLDEF=""
	else
		echo ""
		echo "bbgen can use the OpenSSL library to test SSL-enabled services"
		echo "like POP3S, IMAPS, NNTPS and TELNETS. If you have the OpenSSL"
		echo "library installed, I recommend that you enable this."
		echo ""
		echo "Do you want to be able to test SSL-enabled services (y) ?"
		read ENABLESSL
		if test "$ENABLESSL" = "" -o "$ENABLESSL" = "y"
		then
			SSLDEF="-DBBGEN_SSL"
		else
			SSLDEF=""
		fi
		echo ""
	fi
	echo ""; echo "";

	. build/ldap.sh
	if test -z "$LDAPINC" -o -z "$LDAPLIB"
	then
		ENABLELDAP="n"
		LDAPDEF=""
	else
		echo ""
		echo "bbgen can use your $LDAPVENDOR LDAP client library to test LDAP servers."
		echo ""
		echo "Do you want to be able to test LDAP servers (y) ?"
		read ENABLELDAP
		if test "$ENABLELDAP" = "" -o "$ENABLELDAP" = "y"
		then
			if test "$LDAPVENDOR" = "OpenLDAP"; then
				echo "Enable experimental support for LDAP/SSL (OpenLDAP 2.x only) (y) ?"
				read ENABLELDAPSSL
			else
				ENABLELDAPSSL="n"
			fi

			if test "$ENABLELDAPSSL" = "" -o "$ENABLELDAPSSL" = "y"
			then
				LDAPDEF="-DBBGEN_LDAP -DBBGEN_LDAP_USESTARTTLS"
			else
				LDAPDEF="-DBBGEN_LDAP"
			fi
		else
			LDAPDEF=""
		fi
		echo ""
	fi
	echo ""; echo "";

	# Pre-requisites completed.


	if test "$TARGET" != "bbgend"
	then
		echo "Setting up for use with standard Big Brother"
		echo ""

		echo "Where is your Big Brother BBHOME directory [/usr/local/bb/bb] ? "
		read BBHOME
		if test -z "$BBHOME"
		then
			BBHOME=/usr/local/bb/bb
		fi

		if test -r $BBHOME/etc/bbdef.sh
		then
			echo "OK, your BBHOME looks good"
		else
			echo "         ********  NB NB NB *********"
			echo "Ooops ... cannot find the Big Brother configuration in $BBHOME"
			echo "I trust you know better, so I will use that setting anyway."
			echo "         ********  NB NB NB *********"
		fi
		echo ""

		echo "Trying to determine your BB MAXLINE and PORT settings"
		if test -r $BBHOME/src/bb.h
		then
			MAXLINE=`grep "^#define.*MAXLINE.*[0-9]*" $BBHOME/src/bb.h 2>/dev/null`
			if test "$MAXLINE" != ""
			then
				MAXMSG=`echo $MAXLINE | awk '{print $3}'`
				echo "Found your BB MAXLINE to be $MAXMSG"
			else
				MAXMSG="8192"
				echo " *** Could not determine the MAXMSG setting, using 8192 ***"
			fi
	
			PORT=`grep "^#define.*PORT.*[0-9]*" $BBHOME/src/bb.h 2>/dev/null`
			if test "$PORT" != ""
			then
				BBPORT=`echo $PORT | awk '{print $3}'`
				echo "Found your BB PORT to be $BBPORT"
			else
				BBPORT="1984"
				echo " *** Could not determine the PORT setting, using 1984 ***"
			fi
		else
			MAXMSG="8192"
			BBPORT="1984"
			echo "*** Could not determine the MAXMSG and PORT settings ($BBHOME/src/bb.h not found) ***"
			echo "*** Using defaults: PORT=1984, MAXMSG=8192"
		fi
		echo ""

		echo "Where is your Big Brother BBVAR directory [/usr/local/bb/bbvar] ? "
		read BBVAR
		if test -z "$BBVAR"
		then
			BBVAR=/usr/local/bb/bbvar
		fi

		echo "Where is your Webserver CGI-BIN directory [/var/apache/cgi-bin] ? "
		read CGIDIR
		if test -z "$CGIDIR"
		then
			CGIDIR=/var/apache/cgi-bin
		fi

		if test -r $CGIDIR/bb-hist.sh
		then
			echo "OK, your CGIDIR looks good"
		else
			echo "         ********  NB NB NB *********"
			echo "Ooops ... cannot find the Big Brother CGI scripts in $CGIDIR"
			echo "I trust you know better, so I will use that setting anyway."
			echo "         ********  NB NB NB *********"
		fi

	else
		echo "Setting up for use with bbgend"
		echo ""; echo ""

		echo "What userid will be running bbgend [bb] ?"
		read BBUSER
		if test -z "$BBUSER"
		then
			BBUSER="bb"
		fi
		USERDATA=`getent passwd $BBUSER || grep "^${BBUSER}:" /etc/passwd`
		if test $? -eq 0
		then
			echo "Found passwd entry for user $USERDATA"
		else
			echo "FAILURE: The user $BBUSER does not exist. Create user and try again."
			exit 1
		fi
		echo ""; echo ""

		HOMEDIR="`echo $USERDATA|cut -d: -f6`"
		echo "Where do you want the bbgend installation [${HOMEDIR}] ?"
		read BBTOPDIR
		if test -z "$BBTOPDIR"
		then
			BBTOPDIR=${HOMEDIR}
		fi
		if test -d "$BBTOPDIR"
		then
			echo "OK, will configure to use $BBTOPDIR as the bbgend toplevel directory"
		else
			echo "** FAILURE: $BBTOPDIR does not exist. Create it and try again."
			exit 1
		fi
		echo ""; echo ""

		echo "Where to put the bbgend CGI script [$BBTOPDIR/cgi-bin] ? "
		read CGIDIR
		if test -z "$CGIDIR"
		then
			CGIDIR=$BBTOPDIR/cgi-bin
		fi
		echo ""; echo ""

		echo "What is the URL for this CGI directory [/bb-cgi] ? "
		read BBCGIURL
		if test -z "$BBCGIURL"
		then
			BBCGIURL="/bb-cgi"
		fi
		echo ""; echo ""

		echo "What URL will you use for the BB webpages [/bb] ? "
		read BBHOSTURL
		if test -z "$BBHOSTURL"
		then
			BBHOSTURL="/bb"
		fi
		echo ""; echo ""

		echo "** Note that you may need to modify your webserver configuration."
		echo "** After installing, see $BBHOME/etc/bb-apache.conf for an example configuration."
		echo ""; echo ""

		echo "Where to put the bbgend logfiles [/var/log/bb] ? "
		read BBLOGDIR
		if test -z "$BBLOGDIR"
		then
			BBLOGDIR=/var/log/bb
		fi
		echo ""; echo ""

		echo "What is the name of this host [`uname -n`] ? "
		read BBHOSTNAME
		if test -z "$BBHOSTNAME"
		then
			BBHOSTNAME=`uname -n`
		fi
		echo ""; echo ""

		echo "What is the IP-address of this host [127.0.0.1] ? "
		read BBHOSTIP
		if test -z "$BBHOSTIP"
		then
			echo "** NOTE: Using 127.0.0.1 (loopback), but it is probably not what you want **"
			BBHOSTIP=127.0.0.1
		fi
		echo ""; echo ""

		# bbgend defaults to standard port and 32KB message max.
		BBHOSTOS=`uname -s | tr [A-Z] [a-z]`
		BBHOME=$BBTOPDIR/bb
		BBVAR=$BBTOPDIR/bbvar
		BBPORT=1984
		MAXMSG=32768
	fi

	echo "Where should I install the bbgen man-pages (/usr/local/man) ?"
	read MANROOT
	if test -z "$MANROOT"
	then
		MANROOT=/usr/local/man
	fi
	echo ""; echo ""

	echo "The bbgen history CGI replacement by default displays a 1-day"
	echo "graph of the history. It can also show a 1-week, 4-weeks and"
	echo "1-year graphs, or any combination of these."
	echo ""
	echo "Which graphs to show by default (1d/1w/4w/1y/all) [all]"
	read BARS
	if test "$BARS" = "all" -o "$BARS" = ""
	then
		BARSUMS=15
		export BARSUMS
	else
		BARSUMS=0
		export BARSUMS

		echo $BARS | grep -c 1d >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 1`
			export BARSUMS
		fi

		echo $BARS | grep -c 1w >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 2`
			export BARSUMS
		fi

		echo $BARS | grep -c 4w >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 4`
			export BARSUMS
		fi

		echo $BARS | grep -c 1y >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 8`
			export BARSUMS
		fi
	fi
	BARSUMDEF="-DDEFBARSUMS=$BARSUMS"
	export BARSUMDEF
	echo ""; echo ""

	echo "The bbgen history CGI replacement can use a new method to"
	echo "create the summary graphs on the history page. This method"
	echo "gives a more accurate view (more detailed), but uses a fixed-width"
	echo "graph instead of the standard Big Brother graph that automatically"
	echo "resizes to fit your browser window."
	echo ""
	echo "Use the new Big Brother history graph (y/n) [y] ? "
	read USENEWHIST
	if test "$USENEWHIST" = "" -o "$USENEWHIST" = "y"
	then
		echo "   Tell me the display width (in pixels) to use for"
		echo "   the history graph. This could be anything, but to"
		echo "   eliminate as many rounding errors as possible, it"
		echo "   is best to use a multiple of 24."
		echo "   The default value (960) is good on 1024x768 displays"
		echo ""
		echo "   What width should I use for the graph [960] ? "
		read PIXELCOUNT
		if test "$PIXELCOUNT" = ""
		then
			HISTGRAPHDEF="-DDEFPIXELS=960"
			export HISTGRAPHDEF
		else
			HISTGRAPHDEF="-DDEFPIXELS=${PIXELCOUNT}"
			export HISTGRAPHDEF
		fi
	else
		HISTGRAPHDEF=""
	fi
	echo ""; echo ""

	echo "# Toplevel Makefile for bbgen"     > Makefile

	echo "BUILDTOPDIR=\`pwd\`"               >>Makefile
	echo ""                                  >>Makefile
	echo "# configure settings for bbgen"    >>Makefile
	echo "#"                                 >>Makefile
	echo "# Toplevel dir with bb/, bbvar/"   >>Makefile
	echo "BBTOPDIR = $BBTOPDIR"              >>Makefile
	echo "# BB home dir for etc/, www/"      >>Makefile
	echo "BBHOME = $BBHOME"                  >>Makefile
	echo "# BB var dir for data/, hist/"     >>Makefile
	echo "BBVAR = $BBVAR"                    >>Makefile
	echo "# BB CGI scripts go in CGIDIR"     >>Makefile
	echo "CGIDIR = $CGIDIR"                  >>Makefile
	echo "# Maximum size of a BB status msg" >>Makefile
	echo "MAXMSG = $MAXMSG"                  >>Makefile
	echo "# Port number for the BB daemon"   >>Makefile
	echo "BBPORT = $BBPORT"                  >>Makefile
	echo "# Where to install manpages"       >>Makefile
	echo "MANROOT = $MANROOT"                >>Makefile
	echo "# Default history graph setting"   >>Makefile
	echo "HISTGRAPHDEF = $HISTGRAPHDEF $BARSUMDEF"   >>Makefile
	echo ""                                  >>Makefile
	if test "$TARGET" = "bbgend"
	then
		echo "# bbgend settings follows" >>Makefile
		echo "BBGEND = 1"                >>Makefile
		echo "# Username running bbgend" >>Makefile
		echo "BBUSER = $BBUSER"          >>Makefile
		echo "# Logs from bbgend programs go here" >>Makefile
		echo "BBLOGDIR = $BBLOGDIR"      >>Makefile
		echo "# BB server hostname"      >>Makefile
		echo "BBHOSTNAME = $BBHOSTNAME"  >>Makefile
		echo "# BB server IP-address"    >>Makefile
		echo "BBHOSTIP = $BBHOSTIP"      >>Makefile
		echo "# BB server OS"            >>Makefile
		echo "BBHOSTOS = $BBHOSTOS"      >>Makefile
		echo "# URL for BB webpages"     >>Makefile
		echo "BBHOSTURL = $BBHOSTURL"    >>Makefile
		echo "# URL for BB CGIs"         >>Makefile
		echo "BBCGIURL = $BBCGIURL"      >>Makefile
		echo "# RRDtool settings"        >>Makefile
		echo "RRDINCDIR = -I$RRDINC"     >>Makefile
		echo "RRDLIBS = -L$RRDLIB -lrrd" >>Makefile
		echo "# PCRE settings"           >>Makefile
		echo "PCREINCDIR = -I$PCREINC"   >>Makefile
		echo "PCRELIBS = -L$PCRELIB -lpcre" >>Makefile
	fi
	echo "#"                                 >>Makefile
	echo "# OpenSSL settings"                >>Makefile
	echo "SSLFLAGS = $SSLDEF"                >>Makefile
	echo "# Change the following line if compiler complains about a missing ssl.h" >>Makefile
	echo "SSLINCDIR = -I$OSSLINC"            >>Makefile
	echo "SSLLIBS = -L$OSSLLIB -lcrypto -lssl" >>Makefile
	echo "#"                                 >>Makefile
	echo "# OpenLDAP settings"               >>Makefile
	echo "LDAPFLAGS = $LDAPDEF"              >>Makefile
	if test "$LDAPDEF" != ""
	then
		if test "$LDAPINC" != ""
		then
			echo "LDAPINCDIR = -I$LDAPINC"                >>Makefile
		fi
		if test "$LDAPLIB" != ""
		then
			echo "LDAPLIBS = -L$LDAPLIB -lldap $LDAPLBER" >>Makefile
		else
			echo "LDAPLIBS = -lldap $LDAPLBER"            >>Makefile
		fi
	fi

	echo "" >>Makefile
	if test -r build/Makefile.`uname -s`
	then
		echo "include build/Makefile.`uname -s`" >>Makefile
		echo ""
		echo "Using `uname -s` Makefile settings"
		echo ""
	else
		echo "include build/Makefile.generic" >>Makefile
		echo ""
		echo "Using GENERIC Makefile settings"
		echo ""
		echo "If this fails, change the compile settings in Makefile"
		echo ""
		echo "I would appreciate it if you send the changes to"
		echo "bbgen@storner.dk so I can include it in the next version."
		echo ""
	fi
	echo "" >>Makefile
	echo "# Add local CFLAGS etc. settings here" >>Makefile
	echo "" >>Makefile
	echo "include build/Makefile.rules" >> Makefile
	echo "" >> Makefile

	echo ""; echo ""
	echo "Created Makefile with the necessary information to build bbgen."
	echo "Some defaults are used, so do look at the Makefile before continuing."
	echo ""

	echo "Configuration complete - now run 'make' to build the tools"
fi

exit 0

