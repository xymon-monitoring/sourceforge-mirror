#!/bin/sh

# Configure script for bbgen.
#
# This is a quick hack to make things work on the systems I use
# personally, without having to do the full GNU Autoconf thing.

echo ""
echo "Configuration script for bbgen"
echo ""

if test -r Makefile
then
	echo "Already configured - remove Makefile to re-configure"
	exit 1
else
	echo "This script asks a few questions and builds a Makefile to compile bbgen"
	echo ""
	echo "Where is your Big Brother BBHOME directory [/usr/local/bb] ? "
	read BBHOME
	if test -z "$BBHOME"
	then
		BBHOME=/usr/local/bb
	fi

	if test -r $BBHOME/etc/bbdef.sh
	then
		echo "OK, your BBHOME looks good"
	else
		echo "         ********  NB NB NB *********"
		echo "Ooops ... cannot find the Big Brother configuration in $BBHOME"
		echo "I trust you know better, so I will use that setting anyway."
		echo "         ********  NB NB NB *********"
	fi
	echo ""

	echo "Trying to determine your BB MAXLINE and PORT settings"
	if test -r $BBHOME/src/bb.h
	then
		MAXLINE=`grep "^#define.*MAXLINE.*[0-9]*" $BBHOME/src/bb.h 2>/dev/null`
		if test "$MAXLINE" != ""
		then
			MAXMSG=`echo $MAXLINE | awk '{print $3}'`
			echo "Found your BB MAXLINE to be $MAXMSG"
		else
			MAXMSG="8192"
			echo " *** Could not determine the MAXMSG setting ***"
		fi

		PORT=`grep "^#define.*PORT.*[0-9]*" $BBHOME/src/bb.h 2>/dev/null`
		if test "$PORT" != ""
		then
			BBPORT=`echo $PORT | awk '{print $3}'`
			echo "Found your BB PORT to be $BBPORT"
		else
			BBPORT="1984"
			echo " *** Could not determine the PORT setting ***"
		fi
	else
		MAXMSG="8192"
		BBPORT="1984"
		echo "*** Could not determine the MAXMSG and PORT settings ($BBHOME/src/bb.h not found) ***"
	fi
	echo ""

	echo "To install the bbgen CGI scripts for history and reporting, I"
	echo "need to know where you webserver keeps CGI scripts."
	echo "This setting is only used by \"make install\""
	echo "Where is your Webserver CGI-BIN directory [/var/apache/cgi-bin] ? "
	read CGIDIR
	if test -z "$CGIDIR"
	then
		CGIDIR=/var/apache/cgi-bin
	fi

	if test -r $CGIDIR/bb-hist.sh
	then
		echo "OK, your CGIDIR looks good"
	else
		echo "         ********  NB NB NB *********"
		echo "Ooops ... cannot find the Big Brother CGI scripts in $CGIDIR"
		echo "I trust you know better, so I will use that setting anyway."
		echo "         ********  NB NB NB *********"
	fi
	echo ""

	echo "The bbgen history CGI replacement by default displays a 1-day"
	echo "graph of the history. It can also show a 1-week, 4-weeks and"
	echo "1-year graphs, or any combination of these."
	echo ""
	echo "Which graphs to show by default (1d/1w/4w/1y/all) [all]"
	read BARS
	if test "$BARS" = "all" -o "$BARS" = ""
	then
		BARSUMS=15
		export BARSUMS
	else
		BARSUMS=0
		export BARSUMS

		echo $BARS | grep -c 1d >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 1`
			export BARSUMS
		fi

		echo $BARS | grep -c 1w >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 2`
			export BARSUMS
		fi

		echo $BARS | grep -c 4w >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 4`
			export BARSUMS
		fi

		echo $BARS | grep -c 1y >/dev/null
		if test $? -eq 0
		then
			BARSUMS=`expr $BARSUMS + 8`
			export BARSUMS
		fi
	fi
	BARSUMDEF="-DDEFBARSUMS=$BARSUMS"
	export BARSUMDEF
	echo ""

	echo "The bbgen history CGI replacement can use a different method to"
	echo "create the summary graphs on the history page. This method"
	echo "gives a more accurate view (more detailed), but uses a fixed-width"
	echo "graph instead of the standard Big Brother graph that automatically"
	echo "resizes to your browser window."
	echo ""
	echo "Use the standard Big Brother history graph (y/n) [y] ? "
	read USEPCTHIST
	if test "$USEPCTHIST" = "n"
	then
		echo "   Tell me the display width (in pixels) to use for"
		echo "   the history graph. This could be anything, but to"
		echo "   eliminate as many rounding errors as possible, it"
		echo "   is best to use a multiple of 24."
		echo "   The default value (960) is good on 1024x768 displays"
		echo ""
		echo "   What width should I use for the graph [960] ? "
		read PIXELCOUNT
		if test "$PIXELCOUNT" = ""
		then
			HISTGRAPHDEF="-DDEFPIXELS=960"
			export HISTGRAPHDEF
		else
			HISTGRAPHDEF="-DDEFPIXELS=${PIXELCOUNT}"
			export HISTGRAPHDEF
		fi
	else
		HISTGRAPHDEF=""
	fi
	echo ""

	echo "bbgen normally uses the nslookup and dig tools to test DNS servers."
	echo "However, it can now use a built-in resolver library (ares) - this"
	echo "is faster and allows more flexible tests, but the output looks" 
	echo "different than the normal nslookup/dig output."
	echo "Also, ares does not support name lookups via NIS/NIS+ (YP)."
	echo ""
	echo "NB: The ares library has not been thoroughly tested."
	echo "    Use with caution!"
	echo ""
	echo "Do you want to use the ares DNS library ?"
	read ENABLEARES
	if test "$ENABLEARES" = "" -o "$ENABLEARES" = "y"
	then
		ARESDEF="-DUSE_ARES -I./ares-1.1.1/"
		ARESLIB="libares.a"
	else
		ARESDEF=""
		ARESLIB=""
	fi
	echo ""


	echo "bbgen uses the CURL library for http and https tests."
	echo "I will try to find your curl library and headers with curl-config"
	CURLVER=`curl-config --version`
	if test $? -eq 0
	then
		echo "Your curl-config tells me you have curl version `curl-config --version`"
		if test "`curl-config --feature | grep -c SSL`" = "1"
		then
			echo "Your libcurl supports SSL for https transfers - good"
		else
			echo "         ********  NB NB NB *********"
			echo "WARNING: Your libcurl does not support SSL - you cannot test https sites"
			echo "I recommend that you rebuild libcurl with SSL support"
			echo "         ********  NB NB NB *********"
		fi
		CURLMSG="Determined with curl-config - ought to work"
		CURLCC="`curl-config --cc`"
		CURLINCLUDE="`curl-config --cflags`"
		CURLLIBS="`curl-config --libs`"
	else
		echo "         ********  NB NB NB *********"
		echo "Cannot run curl-config - are you sure you have libcurl ?"
		echo "Assuming you have libcurl in /usr/local/lib and /usr/local/include"
		echo "         ********  NB NB NB *********"
		CURLMSG="These settings were GUESSED by configure - they probably need changing"
		CURLCC="cc"
		CURLINCLUDE="-I/usr/local/include"
		CURLLIBS="-L/usr/local/lib -lcurl -lssl -lcrypto -lz"
	fi
	echo ""

	OSSLINC=""
	OSSLLIB=""
	for DIR in /usr/local/ssl /usr/local /usr
	do
		if test -d $DIR/include/openssl
		then
			OSSLINC=$DIR/include
		fi

		if test -f $DIR/lib/libcrypto.so
		then
			OSSLLIB=$DIR/lib
		fi
		if test -f $DIR/lib/libcrypto.a
		then
			OSSLLIB=$DIR/lib
		fi
	done

	if test "$OSSLINC" != "" -a "$OSSLLIB" != ""
	then
		echo "Found OpenSSL include files in $OSSLINC"
		echo "Found OpenSSL libraries in $OSSLLIB"
	else
		echo "*************************"
		echo "*** OpenSSL not found ***"
		echo "*************************"
	fi
	echo "bbgen can use the OpenSSL library to test SSL-enabled services"
	echo "like POP3S, IMAPS, NNTPS and TELNETS. If you have the OpenSSL"
	echo "library installed, I recommend that you enable this."
	echo ""
	echo "Do you want to be able to test SSL-enabled services (y) ?"
	read ENABLESSL
	if test "$ENABLESSL" = "" -o "$ENABLESSL" = "y"
	then
		echo "NB: You must define services in BBNETSVCS (BBHOME/etc/bbdef.sh) also."
		SSLDEF="-DBBGEN_SSL"
	else
		SSLDEF=""
	fi
	echo ""

	for DIR in /usr/local /usr
	do
		if test -f $DIR/include/ldap.h
		then
			LDAPINC=$DIR/include
		fi

		if test -f $DIR/lib/libldap.so
		then
			LDAPLIB=$DIR/lib
		fi
		if test -f $DIR/lib/libldap.a
		then
			LDAPLIB=$DIR/lib
		fi
	done
	#
	# Some systems require liblber also
	#
	if test -f $LDAPLIB/liblber.a
	then
		LDAPLBER=-llber
	fi
	if test -f $LDAPLIB/liblber.so
	then
		LDAPLBER=-llber
	fi

	if test "$LDAPINC" != "" -a "$LDAPLIB" != ""
	then
		echo "Found LDAP include files in $LDAPINC"
		echo "Found LDAP libraries in $LDAPLIB"
	else
		echo "******************************"
		echo "*** LDAP library not found ***"
		echo "******************************"
	fi
	echo "bbgen can use a LDAP client library to test LDAP servers."
	echo "If you have e.g. the OpenLDAP libraries on your system (it is"
	echo "standard e.g. on Solaris 8), it is recommended that you"
	echo "enable this."
	echo ""
	echo "Do you want to be able to test LDAP servers (y) ?"
	read ENABLELDAP
	if test "$ENABLELDAP" = "" -o "$ENABLELDAP" = "y"
	then
		echo "Enable experimental support for LDAP/SSL (OpenLDAP 2.x only) (y) ?"
		read ENABLELDAPSSL
		if test "$ENABLELDAPSSL" = "" -o "$ENABLELDAPSSL" = "y"
		then
			LDAPDEF="-DBBGEN_LDAP -DBBGEN_LDAP_USESTARTTLS"
		else
			LDAPDEF="-DBBGEN_LDAP"
		fi
	else
		LDAPDEF=""
	fi
	echo ""

	echo "Where should I install the bbgen man-pages (/usr/local/man) ?"
	read MANROOT
	if test -z "$MANROOT"
	then
		MANROOT=/usr/local/man
	fi

	echo "# configure settings for bbgen" > Makefile
	echo "BBHOME = $BBHOME"               >>Makefile
	echo "CGIDIR = $CGIDIR"               >>Makefile
	echo "HISTGRAPHDEF = $HISTGRAPHDEF $BARSUMDEF"   >>Makefile
	echo "MAXMSG = $MAXMSG"               >>Makefile
	echo "BBPORT = $BBPORT"               >>Makefile
	echo "MANROOT = $MANROOT"             >>Makefile
	echo "#"                              >>Makefile
	echo "# ARES settings"                >>Makefile
	echo "ARESFLAGS = $ARESDEF"           >>Makefile
	echo "ARESLIB = $ARESLIB"             >>Makefile
	echo "#"                              >>Makefile
	echo "# $CURLMSG"                     >>Makefile
	echo "CC = $CURLCC"                   >>Makefile
	echo "CURLINCLUDE = $CURLINCLUDE"     >>Makefile
	echo "CURLLIB = $CURLLIBS"            >>Makefile
	echo "#"                              >>Makefile
	echo "# OpenSSL settings"             >>Makefile
	echo "SSLFLAGS = $SSLDEF"             >>Makefile
	echo "# Change the following line if compiler complains about a missing ssl.h" >>Makefile
	echo "SSLINCDIR = -I$OSSLINC"         >>Makefile
	echo "SSLLIBDIR = -L$OSSLLIB"         >>Makefile
	echo "#"                              >>Makefile
	echo "# OpenLDAP settings"            >>Makefile
	echo "LDAPFLAGS = $LDAPDEF"           >>Makefile
	if test "$LDAPDEF" != ""
	then
		if test "$LDAPINC" != ""
		then
			echo "LDAPINCDIR = -I$LDAPINC"      >>Makefile
		fi
		if test "$LDAPLIB" != ""
		then
			echo "LDAPLIBS = -L$LDAPLIB -lldap $LDAPLBER" >>Makefile
		else
			echo "LDAPLIBS = -lldap $LDAPLBER"            >>Makefile
		fi
	fi

	if test -r Makefile.`uname -s`
	then
		echo "include Makefile.`uname -s`" >>Makefile
		echo ""
		echo "Using `uname -s` Makefile settings"
		echo ""
	else
		echo "include Makefile.generic" >>Makefile
		echo ""
		echo "Using GENERIC Makefile settings"
		echo ""
		echo "If this fails, change the compile settings in Makefile"
		echo ""
		echo "I would appreciate it if you send the changes to"
		echo "bbgen@storner.dk so I can include it in the next version."
		echo ""
	fi
	echo "include Makefile.rules" >> Makefile
	echo "" >> Makefile
	echo "# Add local CFLAGS etc. settings below here" >>Makefile

	echo "Created Makefile with the necessary information to build bbgen."
	echo "If you need to change settings, you should change the Makefile"
	echo ""

	echo "Configuration complete - now run 'make' to build the tools"
fi

exit 0

