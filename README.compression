Compression in Xymon
====================

** DRAFT DOCUMENT **


Xymon can be configured to use compression when sending messages to
the xymon server, although this has implications for high volume systems.
Compression can be enabled and disabled on a per process basis through
command arguments or environment variables. The default compression 
algorithm may be different depending on which binary is being used, but
this can also be overridden at the command line or through variables.

xymond MUST be compiled with support for the algorithm in question in 
order to understand a message compressed with that by the client. 

Xymon "trunk" version 5 only supports the zlib algorithm, and <4.3 does
not support compression at all.

Packagers: It is recommended to compile the xymon server with 
support for all compression libraries available on your system, but 
with compression disabled by default on long term support platforms.


The available compression algorithms are:

* LZO
  This is the default compression algorithm in the 4.4 branch. It 
  provides reasonable compression ratios, but fast compression and
  very fast decompression. If the LZO libraries are not installed 
  on your system (available at http://www.oberhumer.com/opensource/lzo/)
  then the "minilzo" files will be included automatically. All 
  versions of xymon 4.4 and beyond support this algorithm.

* ZLIB
  zlib (aka gzip/deflate) provides high compression ratios but 
  relatively slow decompression. The 'zlib' library is installed 
  virtually everywhere, and messages sent with zlib will be 
  readable by the previous 'trunk' version of xymon 5. Due to
  the high CPU cost of decompression, it should not be used to send
  high volumes of messages to very heavily loaded xymon servers.

* LZ4/LZ4HC
  LZ4 is a new compression algorithm based on the LZ work but 
  optimized for speed, particularly decompression efficiency. It 
  has multiple variants, but xymon can use either the regular or the
  high-compression modes.

  The regular mode achieves reasonable compression ratios similar to 
  LZO, but much faster decompression, making it a good choice (and the
  default) for xymonnet, which sends a lot of data to the xymond server
  but must also complete its polling quickly.

  The high-compression mode uses the same algorithm, with roughly the
  same decompression speed, but sacrifices a 10x increase in 
  compression time in exchange for a 50% increase in compression ratio,
  approaching that of zlib. This is the default for the bare "xymon" 
  client, which is normally not running in high concurrency on a single
  system.

* PLAIN
  No compression but wraps the message in a compression header.


OPTIONS
=======

* COMPRESSION="TRUE"
Set this in xymonserver.cfg and/or xymonclient.cfg to globally enable
compression in that environment.

* COMPRESSTYPE=[lzo | zlib | lz4 | lz4hc | plain]
Set this to select the default algorithm. If absent, "lzo" is used.

(The old XYMON_COMPRESS and XYMON_COMPTYPE variables have been deprecated.)

All xymon binaries support the --compress and --no-compress arguments,
which will force compression on and off. You can specify the algorithm
to use as "--compress=lzo" as well. 

NOTE: This is the *only* way to override the default type for 'xymon' 
and 'xymonnet' if compiled with LZ4 support


XYMONPROXY and TWO-WAY COMPRESSED MESSAGES
==========================================

At the moment, xymonproxy does NOT decompress messages in transit, but
simply passes them upwards to xymond (or the next destination, possibly
another xymonproxy). For these purposes, xymonproxy treats these like
status messages and does NOT send a response back to the client. 

This may change before final release.

