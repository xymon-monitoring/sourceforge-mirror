Stuff that standard BB does which bbgen/bbtest-net does not
-----------------------------------------------------------
* Handle the missing fping.sh extensions (IP ranges).
* Handle modem banks
* Handle "group" as mkbb.sh does

Suggestions from users
----------------------
* When a host exists on multiple pages, provide links to
  the other pages showing this host. Maybe from the "info"
  column view ?
* Support for testing standard TCP services that are
  tunnelled through TLS. pop3s, imaps, nntps, smtps. 
  Need to talk to the openssl library for that.

Ideas of my own
---------------
* Switch httptest to use the libcurl "multi" interface
  for multiple concurrent web checks.
* Check of RPC services using getrpcent and rpcinfo
* Implement the "local" tests (cpu, disk, memory,
  process, services - NOT logs) as network tests
  using SNMP
* libcurl can support LDAP queries. So implement support
  for running ldap checks, if the runtime library does.
  Hmm ... apparently it does not work :-( and the curl
  guys dont want to support it anymore :-((
  Cf. curl bug item #735752
* Use Autoconf. Need to learn how to use it first, though.
* Communication between BBDISPLAY and BBNET servers.
  Build a new daemon to run on the BBNET servers. It
  establishes a persistent connection to bbd using
  "bbnetd BBLOCATION" message, and then waits for
  bb-hosts entries to arrive. When one arrives,
  write it to a temp file and then launch bbtest-net
  using that file as bb-hosts.
  On the BBDISPLAY side, fork off a separate process
  to handle the bbnetd stuff and register the link
  between the BBLOCATION and the socket so only 
  relevant stuff is pushed to each bbnetd daemon.
  Would allow for "Test Now" functionality, and might
  also be used for pushing config updates to BBNET 
  servers without having to open up more ports.

If I have too much time someday
-------------------------------
* Re-implement bbd using ucspi-tcp "tcpserver" to
  catch incoming messages and store them to a file.
  Maybe restrict incoming messages to status/page only ?
  The disable/enable/notes messages could go via a unix 
  socket, so they could only be local.
  Then run a processing task to move messages off
  to the logs/ directory, generate web pages,
  initiate paging etc.
  Another cool feature would be to sign messages with
  a key installed on the sender system. Perhaps for
  "dangerous" messages only - disable/enable, notes,
* Perhaps switch to using a DB for storing messages.

