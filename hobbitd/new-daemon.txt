* Implementer ny "streaming" protokol, som bruger en fast TCP forbin-
  delse til at modtage beskeder. Besked-formatet beholdes som det er,
  og der bruges blot en NUL til at adskille beskeder fra hinanden.

* Brug bbproxy til at tage imod beskeder i "legacy" protokol format
  bbproxy skal så implementere klient-siden af den ny streaming
  protokol.

* Den ny bbd tager kun mod stream beskeder.

* Ny bbd implementerer en samlet BBDISPLAY+BBPAGER. Separat BBPAGER
  server understøttes ikke. Der konstrueres en ny forsimplet protokol 
  "bbgendack" til at registrere acknowledgements.
  Det betyder at "online", "offline", "page" og "ack" beskeder
  ignoreres. 

* "disable" beskeder sætter intern status-farve til "blue" og logger
  beskeden om årsag og varighed.

* "enable" beskeder clearer blot flag (varighed) for hvor længe
  en test er disabled. Herefter vil nye status-beskeder automatisk
  blive håndteret korrekt.

* bbd etablerer et antal kanaler
  - "status" : Fødes med indholdet af alle "status" og "summary" 
               beskeder.
  - "stachg" : Fødes med indholdet af "status" beskeder hvor
               status-farven skifter.
  - "page"   : Fødes med indholdet af "status" beskeder hvor
               status skifter mellem en ikke-alarm farve og en
	       alarm-farve, samt med "bbgendack" beskeder.
  - "data"   : Fødes med indholdet af "data" beskeder
  - "notes"  : Fødes med indholdet af "notes" beskeder
  - "enadis" : Fødes med indholdet af "enable" og "disable" beskeder

* Der startes et antal hjælpe-processer til at håndtere I/O og
  andre "tunge" tasks:
  - statuslog: Abonnerer på "status". Opdaterer bbvar/logs/ filer.
  - htmllog  : Abonnerer på "status". Opdaterer bb/www/html/ filer.
  - history  : Abonnerer på "stachg". Opdaterer bbvar/hist/allevents,
               bbvar/hist/{HOST,HOST.TEST}, bbvar/histlogs/HOST/TEST/*
  - datalog  : Abonnerer på "data". Opdaterer bbvar/data/ filer.
  - infolog  : Abonnerer på "notes". Opdaterer bbvar/notes/ filer.
  - enalog   : Abonnerer på "enadis". Opdaterer bbvar/disabled/ filer.
  - alert    : Abonnerer på "page". Udsender alarmer.
  - larrd*2  : Abonnerer på "status" og "data". Opdaterer LARRD RRD's.

* kanal protokoller

  status
  ------
  @@status|timestamp|sender|hostname|testname|expiretime|color|flags|prevcolor|changetime|ackexpiretime|ackmessage|disableexpiretime|disablemessage
  <status message>
  @@

  stachg
  ------
  @@stachg|timestamp|sender|hostname|testname|expiretime|color|prevcolor|changetime
  <new status message>
  @@

  page
  ----
  @@page|timestamp|sender|hostname|testname|hostip|expiretime|color|prevcolor|changetime|location|cookie
  <message>
  @@

  @@ack|timestamp|sender|hostname|testname|hostip|expiretime
  <ack message>
  @@

  Note that "page" modules get messages whenever the alert-state of a test
  changes. I.e. a message is generated whenever a test goes from a color
  that is non-alerting to a color that is alerting, or vice versa.

  How does the pager know when a test is disabled ? It will get a "page"
  message with color=blue, if the old color of the test was in an alert
  state. (If it wasn't, the pager module does not need to know that the
  test has been disabled). It should then clear any stored info about
  active alerts for this host.test combination.

  data
  ----
  @@data|timestamp|sender|hostname|testname
  <message>
  @@

  notes
  -----
  @@notes|timestamp|sender|hostname
  <message>
  @@

  enadis
  -----
  @@enadis|timestamp|sender|hostname|testname|expiretime
  @@

  "expiretime" is 0 for an "enable" message, >0 for a
  "disable" message.

  All channels
  ------------
  @@drophost|timestamp|sender|hostname
  @@droptest|timestamp|sender|hostname|testname
  @@renamehost|timestamp|sender|hostname|newhostname
  @@renametest|timestamp|sender|hostname|oldtestname|newtestname
  @@shutdown|timestamp|sender


* Simpel "ack" protokol.
  - bbd udsteder en "cookie" når en test går i alert status; den er
    gyldig lige så længe som status beskeden (default: 30 minutter).
    Ved udløb fornyes den hvis status fortsat er i alert-tilstand.
  - En cookie er et tilfældigt 6-cifret tal. bbd holder rede på udstedte 
    cookies og hvilken host.test kombination den gælder til.
  - "bbgendack cookie duration [ack message]" checker cookie, og hvis
    den er gyldig sættes ack-flaget på den pågældende statuslog. Denne
    besked videresendes på "page" kanalen så alarmerings-moduler ved
    om en status er ack'ed.
  - En negativ cookie fungerer som ack af alle udestående alerts på den
    pågældende host.
  - En "ack" logges i bbd_net med expire-time og tekst. Disse videresendes i
    status-beskeder.
  - Den gamle "ack ack_event" besked understøttes også.

* "bbgendlog HOST.TEST" request returnerer den aktuelle statuslog for en
  host.test kombination.

  hostname|testname|color|testflags|lastchange|logtime|validtime|acktime|disabletime|sender|cookie|ackmsg|dismsg
  message

* "bbgendboard" request returnerer 1 linie per statuslog med opsummering af
  status, d.v.s. al information pånær fritekst fra logfilen. Indeholder
  også "meta" information såsom hvor den kom fra, tid for sidste status
  skift osv. Alt det der tidligere aflæstes fra bbvar/logs/ filerne.

  hostname|testname|color|testflags|lastchange|logtime|validtime|acktime|disabletime|sender|cookie|1st line of message

* "bbgenddrop HOSTNAME [TESTNAME]" drops all information about a host, 
  or a host.test combination. This propagates a "drophost" / "droptest"
  message to all workers, so they can delete permanent storage. This
  will enable a simple "bbrm" implementation.

* "bbgendrename OLDHOSTNAME NEWHOSTNAME" renames a host. This propagates
  a "renamehost" message to all workers.

* "bbgendrename HOSTNAME OLDTEST NEWTEST" renames a test. This propagates
  a "renametest" message to all workers.

* Master/worker communications
  - Uses a single shmem segment as a bulletin board for new messages.
  - Communication synchronized with two semaphores: BOARDBUSY and GOCLIENT.
  - Number of clients found via registering on a CLIENTCOUNT semaphore
    (clients up this when registering, and down it when they terminate).
  - Sequence of events is as follows:
               MASTER                    CLIENT 1            CLIENT 2
       Wait BOARDBUSY = 0          Down GOCLIENT          Down GOCLIENT
       <message arrives>           (block until > 0)      (block until > 0)
       Up BOARDBUSY (+CLIENTCOUNT)
       Up GOCLIENT (+CLIENTCOUNT)
				   Copy message           Copy message
				   Wait GOCLIENT=0        Wait GOCLIENT=0
                                   Down BOARDBUSY         Down BOARDBUSY

     The client wait (GOCLIENT=0) is necessary to prevent one client
     from snatching a message on behalf of the other clients (looping with
     the same message multiple times).

* Environment settings - bbd_filestore
  - BBLOGS : Default "--dir" when run with --status
  - BBDATA : Default "--dir" when run with --data
  - BBNOTES: Default "--dir" when run with --notes

* Environment settings - bbd_history
  - BBALLHISTLOG  : If TRUE, the "allevents" file is updated.
  - BBHOSTHISTLOG : If TRUE, the "hostname" host events file is updated
  - BBHIST        : Directory for the allevents, host- and status-event logs
  - SAVESTATUSLOG : If TRUE, the historical full status log is stored
  - BBHISTLOGS    : Top level directory for the historical full status logs

* Environment settings - bbd_net
  - BBGHOSTS      : Default "--ghosts" value
  - BBHOSTS       : Default "--bbhosts" value

* Environment settings - bb-hostsvc.cgi
  - LARRDS        : Comma-separated list of statuses that have a LARRD graph
  - NONHISTS      : Comma-separated list of statuses with no History button
  - USEBBGEND     : If TRUE, get log via the bbgend net-interface instead of files.
  - CGIBINURL
  - BBWEB
  - BBLOGS
  - BBHISTLOGS
  - BBSKIN
  - DOTHEIGHT
  - DOTWIDTH

* bbgend_larrd : Ikke kompatibel for 
  - vmstat  : 
  - netstat : Linux, snmpnetstat, Win32

